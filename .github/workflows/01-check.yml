# This is a basic workflow to help you get started with Actions

name: check-and-validate

# # Controls when the workflow will run
# on:
#   # Triggers the workflow on push or pull request events but only for the "main" branch
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel
# jobs:
#   # This workflow contains a single job called "build"
#   build:
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v3

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

#       # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.


on:
  push:
    branches:
      - '**'
    paths:
      - "**/**/*.tf"
  # pull_request:
  #   branches:
  #     - main

jobs:
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.
  # ------------------------------------------------------------------------------------------------------------------------------------------------
  changed_files:
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Checking TF code
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

      - name: get changed dirs
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          dir_names: true
          dir_names_exclude_current_dir: true

      - name: setup tf
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: $TF_VERSION

        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 

      - name: fmt and validate
        run: |
          terraform version
          for dir in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "> CHANGED: $dir"
            echo "terraform -chdir=$dir fmt"
            echo "terraform -chdir=$dir validate"
          done
